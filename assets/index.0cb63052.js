import{R as e}from"./vendor.fe7edddc.js";import{N as r}from"./index.fd650fc1.js";import{C as m,a as t,b as a,c as n,d as o}from"./index.0b1b82f9.js";import{CShead as c}from"./index.e1b4bb5a.js";import{G as l,C as d,E as i,B as s,U as h,M as g,a as u}from"./icons.d7f28cdd.js";import"./index.95e92e4e.js";import"./index.f308b97b.js";var A=()=>e.createElement(r,{justifyContent:"flex-start",height:"100%"},e.createElement(c,{text:"Git Cheat Sheet"},e.createElement(l,null)),e.createElement(m,null,e.createElement(t,null,e.createElement(a,null,e.createElement(d,null),"\xA0 Create"),e.createElement(n,null,e.createElement(o,{content:[{head:"Clone and Existing Repository",command:"$ git clone ssh://user@domain.com/repo.git"},{head:"Create a new local repository",command:"$ git init"}]}))),e.createElement(t,null,e.createElement(a,null,e.createElement(i,null),"\xA0 Local Changes"),e.createElement(n,null,e.createElement(o,{content:[{head:"Changed files in your working directory",command:"$ git status"},{head:"Changes to tracked files",command:"$ git diff"},{head:"Add all current changes to the next commit",command:"$ git add ."},{head:"Add some changes in <file> to the next commit",command:"$ git add -p <file>"},{head:"Commit all local changes in tracked files",command:"$ git commit -a"},{head:"Commit previously staged changes",command:"$ git add -p"},{head:"Add some changes in to the next commit",command:"$ git commit"},{head:"Change the last commit, Don\u2018t amend published commits!",command:"$ git commit --amend"}]}))),e.createElement(t,null,e.createElement(a,null,e.createElement(s,null),"\xA0 Branching & Tags"),e.createElement(n,null,e.createElement(o,{content:[{head:"List all existing branches",command:"$ git branch"},{head:"Switch HEAD branch",command:"$ git checkout <branch>"},{head:"Create a new branch based on your current HEAD",command:"$ git branch <new-branch>"},{head:"Create a new tracking branch based on a remote branch",command:"$ git checkout --track <remote/branch>"},{head:"Delete a local branch",command:"$ git branch -d <branch>"},{head:"Mark the current commit with a tag",command:"$ git tag <tag-name>"}]}))),e.createElement(t,null,e.createElement(a,null,e.createElement(h,null),"\xA0 Update & Publish"),e.createElement(n,null,e.createElement(o,{content:[{head:"List all currently configured remotes",command:"$ git remote -v"},{head:"Show information about a remote",command:"$ git remote show <remote>"},{head:"Add new remote repository, named <remote>",command:"$ git remote add <remote> <url>"},{head:"Download all changes from <remote>, but don\u2018t integrate into HEAD",command:"$ git fetch <remote>"},{head:"Download changes and directly merge/integrate into HEAD",command:"$ git pull <remote> <branch>"},{head:"Publish local changes on a remote",command:"$ git push <remote> <branch>"},{head:"Delete a branch on the remote",command:"$ git branch -dr <remote/branch>"},{head:"Publish your tags",command:"$ git push --tags"}]}))),e.createElement(t,null,e.createElement(a,null,e.createElement(g,null),"\xA0 Merge & Rebase"),e.createElement(n,null,e.createElement(o,{content:[{head:"Merge <branch> into your current HEAD",command:"$ git merge <branch>"},{head:"Rebase your current HEAD onto <branch> Don\u2018t rebase published commits!",command:"$ git rebase <branch>"},{head:"Abort a rebase",command:"$ git rebase --abort"},{head:"Continue a rebase after resolving conflicts",command:"$ git rebase --continue"},{head:"Use your configured merge tool to solve conflicts",command:"$ git mergetool"},{head:"Use your editor to manually solve conflicts",command:"$ git add <resolved-file>"},{head:"After resolving mark file as resolved",command:"$ git rm <resolved-file>"}]}))),e.createElement(t,null,e.createElement(a,null,e.createElement(u,null),"\xA0 Undo"),e.createElement(n,null,e.createElement(o,{content:[{head:"Discard all local changes in your working directory",command:"$ git reset --hard HEAD"},{head:"Discard local changes in a specific file",command:"$ git checkout <file>"},{head:"Revert a commit (by producing a new commit with contrary changes)",command:"$ git revert <commit>"},{head:"Reset your HEAD pointer to a previous commit & discard all changes since then",command:"$ git reset --hard <commit>"},{head:"Reset your HEAD pointer to a previous commit & preserve all changes as unstaged changes",command:"$ git reset <commit>"},{head:"Reset your HEAD pointer to a previous commit & preserve uncommitted local changes",command:"$ git reset --keep <commit>"}]})))));export{A as default};
